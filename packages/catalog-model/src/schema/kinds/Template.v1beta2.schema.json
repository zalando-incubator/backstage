{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "TemplateV1beta1",
  "description": "A Template describes a scaffolding task for use with the Scaffolder. It describes the required parameters as well as a series of steps that will be taken to execute the scaffolding task.",
  "examples": [
    {
      "apiVersion": "backstage.io/v1beta1",
      "kind": "Template",
      "metadata": {
        "name": "react-ssr-template",
        "title": "React SSR Template",
        "description": "Next.js application skeleton for creating isomorphic web applications.",
        "tags": ["recommended", "react"]
      },
      "spec": {
        "owner": "artist-relations-team",
        "type": "website",
        "parameters": {
          "required": ["name", "description"],
          "properties": {
            "name": {
              "title": "Name",
              "type": "string",
              "description": "Unique name of the component"
            },
            "description": {
              "title": "Description",
              "type": "string",
              "description": "Description of the component"
            }
          }
        },
        "steps": [
          {
            "id": "fetch",
            "name": "Fetch",
            "action": "fetch:plain",
            "parameters": {
              "url": "./template"
            }
          },
          {
            "id": "publish",
            "name": "Publish to GitHub",
            "action": "publish:github",
            "parameters": {
              "repoUrl": "{{ parameters.repoUrl }}"
            }
          }
        ],
        "output": {
          "catalogInfoUrl": "{{ steps.publish.output.catalogInfoUrl }}"
        }
      }
    }
  ],
  "allOf": [
    {
      "$ref": "Entity"
    },
    {
      "type": "object",
      "required": ["spec"],
      "properties": {
        "apiVersion": {
          "enum": ["backstage.io/v1beta2"]
        },
        "kind": {
          "enum": ["Template"]
        },
        "metadata": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "The nice display name for the template.",
              "examples": ["React SSR Template"],
              "minLength": 1
            }
          }
        },
        "spec": {
          "type": "object",
          "required": ["type", "steps"],
          "properties": {
            "type": {
              "type": "string",
              "description": "The type of component. This field is optional but recommended. The software catalog accepts any type value, but an organization should take great care to establish a proper taxonomy for these. Tools including Backstage itself may read this field and behave differently depending on its value. For example, a website type component may present tooling in the Backstage interface that is specific to just websites.",
              "examples": ["service", "website", "library"],
              "minLength": 1
            },
            "parameters": {
              "oneOf": [
                {
                  "type": "object",
                  "description": "The JSONSchema describing the inputs for the template."
                },
                {
                  "type": "array",
                  "description": "A list of separate forms to collect parameters.",
                  "items": {
                    "type": "object",
                    "description": "The JSONSchema describing the inputs for the template."
                  }
                }
              ]
            },
            "steps": {
              "type": "array",
              "description": "A list of steps to execute.",
              "items": {
                "type": "object",
                "description": "A description of the step to execute.",
                "required": ["action"],
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "The ID of the step, which can be used to refer to its outputs."
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the step, which will be displayed in the UI during the scaffolding process."
                  },
                  "action": {
                    "type": "string",
                    "description": "The name of the action to execute."
                  },
                  "parameters": {
                    "type": "object",
                    "description": "A templated object describing the inputs to the action."
                  }
                }
              }
            },
            "output": {
              "type": "object",
              "description": "A templated object describing the outputs of the scaffolding task.",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    }
  ]
}
